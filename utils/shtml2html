#! /usr/bin/awk -f
#
#
# Copyright (c) 2001, 2002, 2005 Dan McMahill
# All rights reserved.
#
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
# 


#
# purpose:  parse html, find lines like:
#  <!--#include virtual="/user_footer.incl"-->
# and do the include.  should help in generating static web pages
#
# Usage:
#   awk -f shtml2html in.shtml > out.html
#


BEGIN {
    start = 1;
    sf_eat = 0;
# make sure this is open for when we close it in END
    printf("") > "/dev/stderr";
} 

# hack becasue command line variable assignments don't show up until
# _after_ BEGIN
start==1 {
    if (include == "") {
	include = "." ;
    }
    else {
	include=(".:" include);
    }
    npaths=split(include,includepath,":");
    start=0;
}

{
  
  line=$0;

  if (line ~ /<\!--\#include.*-->/){
# print the part of the line before the #include
    pre = gensub(/(.*)<\!--\#include.*-->/,"\\1",1,line);
    pre = sf(pre);
    printf("%s", pre);

# pick out just the <!--#include ...... --> part
    cmd = gensub(/(.*)(<\!--\#include.*-->)(.*)/,"\\2",1,line);
    #printf("processing directive \"%s\"\n",cmd) > "/dev/stderr";

#figure out the included file name
    file = gensub(/(.*)virtual=\"([^\"]*)\"(.*)/,"\\2",1,cmd);

    if ( file != cmd) {
# make sure we can read the file
	fileok=0;
	for (i=1; i<= npaths; i=i+1) {
	    if (includepath[i] == "") {
# this is the case where include=foo::bar (ie a blank entry)
		filepath =  file;
	    }
	    else {
		filepath = includepath[i] "/" file;
	    }
	    if ( (getline < filepath) < 0 ) {
#		printf("unable to process include of \"%s\": %s\n", \
#		       filepath,ERRNO) > "/dev/stderr";
		close(filepath);
	    }
	    else {
		close(filepath);
		fileok=1;
		break;
	    }
	}
	if (fileok) {
#printf("[%s]",file) > "/dev/stderr";
	    while ( getline < filepath ){ print sf($0); }
	    close(filepath);
	}
	else {
	    printf("unable to process include of \"%s\"\n", \
		   file) > "/dev/stderr";
	    exit 1;
	}
    }
    else {
      printf("ERROR:  could not find the file name in the directive\n") \
	> "/dev/stderr";
      printf("        \"%s\"\n\n",cmd)  > "/dev/stderr";
      exit 1;
    }

    #printf("\n") > "/dev/stderr";

    post = gensub(/(.*)(<\!--\#include.*-->)(.*)/,"\\3",1,line);
    post = sf(post);
    printf("%s\n",post);

  }
  else{
    print sf($0);
  }
}


END {
  close("/dev/stderr");
}

function sf(line) {

# process the <SOURCEFORGE> tags
  if( sourceforge == 1 ) {
    gsub(/<SOURCEFORGE>/, "", line);
    gsub(/<\/SOURCEFORGE>/, "", line);
  } else {
    if(line ~ /<SOURCEFORGE>/ ) { sf_eat = 1; }
    if(line ~ /<\/SOURCEFORGE>/ ) { sf_eat = 2; }
    gsub(/<SOURCEFORGE>/, "<!--", line);
    gsub(/<\/SOURCEFORGE>/, "-->", line);
    if( sf_eat == 1) { return( "" ); }
    else if( sf_eat == 2) { sf_eat = 0 ; return( "" ); }
  }

  return(line);
}


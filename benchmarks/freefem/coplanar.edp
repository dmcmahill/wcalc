// *****************************
// Coplanar Waveguide
// *****************************

/*
 * Copyright (C) 2021 Dan McMahill
 * All rights reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// Usage:
//   # basic example:
//   FreeFem++ -f coplanar.edp
//
//   # read from a data file
//   FreeFem++ -f coplanar.edp -df coplanar.dat
//

include "getARGV.idp"
include "utils.edp"

string df = getARGV("-df", "");
cout << "df = " << df << endl;

// set to true to pause after each plot
bool debug = false;
debug = true;

// set to true to zoom in on the active area.  This messes up accuracy but can
// help check some of the shapes and do sanity checks
bool zoom = false;
//zoom = true;

// used with the adaptive meshing
real errorinit = 0.01;
real error = errorinit;

// Metal thickness
real Tmet = 1.0;

// Trace width
real W = 10;

// Gap between line and coplanar ground
real S = 5.;

// Substrate thickness
real H = 20;

// Relative dielectric constant above the trace
real eps1 = 1;

// Relative dielectric constant of the substrate
real er = 4.8;

// with bottom side ground
bool withGnd = true;
//withGnd = false;

// meshing constants
int m = 200;

int mgndTB = m;
int mgndLR = 50;

int mCpwGndTB = 20;
int mCpwGndLR = 100;

int msigLR = 20;
int msigTB = 100;

int mGap = 50;

// define labels for our borders
int gnd=3, line=4, interface=5;

ofstream logf("coplanar.txt");
logf << "* W     S    H       Tmet       Er  gnd :  Keff   Z0" << endl;
string sp = "    ";

// if no data file is given, create one with the default values
if( df.length == 0) {
    df = "coplanar.tmp";
    ofstream data(df);
    data << "* W     S    H       Tmet       Er    gnd" << endl;
    for(int i=0; i<=1 ; i++) {
        data << W << sp << S << sp << H << sp << Tmet << sp << er << sp << i << endl;
    }
}
ifstream data(df);

cout << "Processing input data from " << df << endl;

while(1) {
    // Width, Space, Height, Metal Thickness, Dielectric Constant
    skipcomment(data, logf);
    if (!data.good()) break;

    data >> W;
    data >> S;
    data >> H;
    data >> Tmet;
    data >> er;
    data >> withGnd;

    cout << "Starting on:" << endl;
    cout << "W           = " << W << endl;
    cout << "S           = " << S << endl;
    cout << "H           = " << H << endl;
    cout << "Tmet        = " << Tmet << endl;
    real TmetMin = 0.001*H;
    if(Tmet < TmetMin) {
        Tmet = TmetMin;
        cout << "Tmet       -> " << Tmet << endl;
    }
    cout << "er          = " << er << endl;
    cout << "bottom gnd  = " << withGnd << endl;

    // total height of the problem (enclosure height)
    real Htot = H*10.0;
    real Hbot = H*10;
    if(zoom) {
        Htot = 2*H;
        Hbot = H;
    }

    // total width of the problem (enclosure width)
    real Wtot = W + 2*S + 2*10*H;
    if(zoom) {Wtot = W + 2*S + 2*W;}
    
    // used to avoid placing the conductor boundary directly at the
    // dielectric interface.  Should revisit and see if we need
    // different boundary segments to avoid this need
    real delta = 0.01*Tmet;
    real deltaLR = 0.001*Wtot;

    // this is a trick with free-fem...the conductor must lie
    // just a bit above the dielectric interface
    real hd3 = H + delta;

    // total width of the coplanar ground
    real disconWT = (Wtot - W - 2*S) / 2.0;
    real cpgwidthT = disconWT - deltaLR;

    // higher mesh region near the signal trace
    real cpgwidthB = 2*H;
    real disconWB = cpgwidthB;

    // lower mesh region further from the signal trace
    real cpgwidthA = cpgwidthT - cpgwidthB;
    real disconWA = disconWT - disconWB;

    // *****************************
    // Define the boundaries
    // *****************************

    // border defines a 2D border in parametric coordinates

    // microstrip height dielectric discontinuity
    border disconLa(t=0., 1) { x = disconWA*(1 - t); y = H; label=interface;}
    border disconLb(t=0., 1) { x = disconWA + disconWB*(1 - t); y = H; label=interface;}
    border disconLG(t=0., 1) { x = (0.5*Wtot - 0.5*W) - S*t; y = H; label=interface;}
    border disconC(t=0., 1) {x = (0.5*Wtot + 0.5*W) - W*(1-t); y = H; label=interface;}
    border disconRG(t=0., 1) {x = 0.5*Wtot + 0.5*W + S*(1-t); y = H; label=interface;}
    border disconRa(t=0., 1) {x = Wtot - disconWA*(1-t); y = H; label=interface;}
    border disconRb(t=0., 1) {x = Wtot - disconWA - disconWB*(1-t); y = H; label=interface;}

    // discontinuity at bottom of substrate to air underneath
    border disconBot(t=0., Wtot) {x = Wtot-t; y = 0; label = interface;}

    // Bottom side ground and also the ground that surrounds
    // the problem

    // Bottom side ground
    border ocbot(t=0,Wtot) {
        x = t;
        if(withGnd) { y = 0; }
        else { y = -Hbot; }
        label = gnd;
    }

    // Enclosure right side
    border ocrt1g(t=-Hbot,0)  {x=Wtot; y=t; label = gnd;}
    border ocrt1(t=0,H)  {x=Wtot; y=t; label = gnd;}
    border ocrt2(t=H,Htot)  {x=Wtot; y=t; label = gnd;}

    // Enclosure top side
    border octop(t=0,Wtot) {x=Wtot-t;y=Htot; label = gnd;}

    // Enclosure left side
    border oclt2(t=H, Htot)  {x=0; y=Htot + H - t; label = gnd;}
    border oclt1(t=0, H)  {x=0; y=H-t; label = gnd;}
    border oclt1g(t=0, Hbot)  {x=0; y=-t; label = gnd;}

    // left coplanar ground
    border cpg1Ba(t=0, 1) {
        x = deltaLR + cpgwidthA*t;
        y = hd3;
        label = gnd;
    }

    border cpg1Bb(t=0, 1) {
        x = deltaLR + cpgwidthA + cpgwidthB*t;
        y = hd3;
        label = gnd;
    }

    border cpg1R(t=0, 1) {
        x = deltaLR + cpgwidthT;
        y = hd3 + Tmet*t;
        label = gnd;
    }

    border cpg1Ta(t=0, 1) {
        x = deltaLR + cpgwidthA*(1-t);
        y = hd3 + Tmet;
        label = gnd;
    }

    border cpg1Tb(t=0, 1) {
        x = deltaLR + cpgwidthA + cpgwidthB*(1-t);
        y = hd3 + Tmet;
        label = gnd;
    }

    border cpg1L(t=0, 1) {
        x = deltaLR;
        y = hd3 + Tmet*(1 - t);
        label = gnd;
    }

    // right coplanar ground
    real ofs = 0.5*Wtot + 0.5*W + S;
    border cpg2Ba(t=0, 1) {
        x = ofs + cpgwidthB + cpgwidthA*t;
        y = hd3;
        label = gnd;
    }

    border cpg2Bb(t=0, 1) {
        x = ofs + cpgwidthB*t;
        y = hd3;
        label = gnd;
    }

    border cpg2R(t=0, 1) {
        x = ofs + cpgwidthT;
        y = hd3 + Tmet*t;
        label = gnd;
    }

    border cpg2Tb(t=0, 1) {
        x = ofs + cpgwidthB*(1-t);
        y = hd3 + Tmet;
        label = gnd;
    }

    border cpg2Ta(t=0, 1) {
        x = ofs + cpgwidthB + cpgwidthA*(1-t);
        y = hd3 + Tmet;
        label = gnd;
    }

    border cpg2L(t=0, 1) {
        x = ofs;
        y = hd3 + Tmet*(1 - t);
        label = gnd;
    }

    // center conductor -- also clockwise
    border ccB(t=0, 1) {
        x = 0.5*Wtot - 0.5*W + W*t;
        y = hd3;
        label = line;
    }

    border ccR(t=0, 1) {
        x = 0.5*Wtot + 0.5*W;
        y = hd3 + Tmet*t;
        label = line;
    }

    border ccT(t=0, 1) {
        x = 0.5*Wtot + 0.5*W - W*t;
        y = hd3 + Tmet;
        label = line;
    }

    border ccL(t=0, 1) {
        x = 0.5*Wtot - 0.5*W;
        y = hd3 + Tmet*(1 - t);
        label = line;
    }


    // *****************************
    // Mesh generation
    // *****************************

    // Build a 2D mesh using border elements
    //
    mesh Th;
    if(withGnd) {
        Th = buildmesh (
           ccT(-msigTB) + ccB(-msigTB) + ccL(-msigLR) + ccR(-msigLR) +
           cpg1L(-mCpwGndLR) + cpg1R(-mCpwGndLR) + cpg1Ta(-mCpwGndTB) + cpg1Tb(-msigTB) + cpg1Ba(-mCpwGndTB) + cpg1Bb(-msigTB) +
           cpg2L(-mCpwGndLR) + cpg2R(-mCpwGndLR) + cpg2Ta(-mCpwGndTB) + cpg2Tb(-msigTB) + cpg2Ba(-mCpwGndTB) + cpg2Bb(-msigTB) +
           ocbot(mgndTB) +
           ocrt1(mgndLR) + ocrt2(mgndLR) +
           octop(mgndTB) +
           oclt2(mgndLR) + oclt1(mgndLR) +
           disconLa(mCpwGndTB) + disconLb(msigTB) +
           disconLG(mGap) +
           disconC(msigTB) +
           disconRG(mGap) +
           disconRa(mCpwGndTB) + disconRb(msigTB)
           );
    } else {
        Th = buildmesh (
           ccT(-msigTB) + ccB(-msigTB) + ccL(-msigLR) + ccR(-msigLR) +
           cpg1L(-mCpwGndLR) + cpg1R(-mCpwGndLR) + cpg1Ta(-mCpwGndTB) + cpg1Tb(-msigTB) + cpg1Ba(-mCpwGndTB) + cpg1Bb(-msigTB) +
           cpg2L(-mCpwGndLR) + cpg2R(-mCpwGndLR) + cpg2Ta(-mCpwGndTB) + cpg2Tb(-msigTB) + cpg2Ba(-mCpwGndTB) + cpg2Bb(-msigTB) +
           ocbot(mgndTB) +
           ocrt1(mgndLR) + ocrt2(mgndLR) +
           octop(mgndTB) +
           oclt2(mgndLR) + oclt1(mgndLR) +
           disconLa(mCpwGndTB) + disconLb(msigTB) +
           disconLG(mGap) +
           disconC(msigTB) +
           disconRG(mGap) +
           disconRa(mCpwGndTB) + disconRb(msigTB)
           // add this for the no bottom side ground case
           + ocrt1g(mgndLR) +  oclt1g(mgndLR) + disconBot(m*2)
           );
    }
    plot(Th, cmm="Mesh", wait=debug);


    // *****************************
    // FE-space and FE-function
    // *****************************
    fespace Uh(Th, P1);

    // *****************************
    // Mathematical Formula
    // *****************************

    // define the relative dielectric constant
    func epsi = 1. + (eps1-1)*(y>H || y<0) + (er-1)*(y<H && y>0);

    // *****************************
    // Weak Formulation
    // *****************************

    // Solve when the dielectric is all free space
    Uh u0;
    Uh v0;

    problem Laplace0(u0, v0)
        = int2d(Th) (grad(u0)' * grad(v0))
        + on(line, u0=1.)
        + on(gnd, u0=0.)
        ;

    Laplace0;
    plot(u0, cmm="Freespace Electric Potential", wait=debug);

    // Solve with the dielectric in place
    Uh u1;
    Uh v1;

    problem Laplace1(u1, v1)
        = int2d(Th) (epsi*grad(u1)' * grad(v1))
        + on(line, u1=1.)
        + on(gnd, u1=0.)
        ;

    Laplace1;
    plot(u1, cmm="Electric Potential with Dielectric(s) in Place", wait=debug);

    real energy0 = eps0 * energy2d(Th, 1.0, u0);
    cout << "energy = " << energy0 << endl;

    real energy1 = eps0 * energy2d(Th, epsi, u1);
    cout << "w/ dielectric energy = " << energy1 << endl;

    real keff = energy1/energy0;
    real z0 = sqrt(keff)/(c0 * energy1);
    real z0no = 1/(c0 * energy0);

    cout << "Lightspeed  = " << c0 << " m/s" << endl;
    cout << "mu0         = " << mu0 << " H/m" << endl;
    cout << "eps0        = " << eps0 << " F/m" << endl;
    cout << "W           = " << W << endl;
    cout << "S           = " << S << endl;
    cout << "H           = " << H << endl;
    cout << "Tmet        = " << Tmet << endl;
    cout << "Wtot        = " << Wtot << endl;
    cout << "er          = " << er << endl;
    cout << "energy in free space          = " << energy0 << endl;
    cout << "energy with dielectric        = " << energy1 << endl;
    cout << "effective dielectric constant = " << keff << endl;
    cout << "Z0, freespace                 = " << z0no << " Ohms" << endl;
    cout << "Z0, with dielectric           = " << z0 << " Ohms" << endl;

    // Width, Space, Height, Metal Thickness, Dielectric Constant, : Effective dielectric constant,  z0
    logf << W << sp << S << sp << H << sp << Tmet << sp << er << sp << withGnd << " : " << keff << sp << z0 << endl;

}

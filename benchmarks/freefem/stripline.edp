// FreeFEM stripline analysis
//

/*
 * Copyright (C) 2021 Dan McMahill
 * All rights reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// The starting point was an example from C Deibele on
// https://www.freelists.org/post/si-list/microstrip-and-stripline-FREEFEM-examples
// Many updates have been made since to align with the wcalc notation, set up for
// sweeps, etc.
//
// With stripline we have a true TEM propagation mode and aside from providing some
// additional checkpoint data, the FreeFEM analysis can help identify limits on
// the metal thickness correction.  It could also be used to help validate
// stripline that is offset in one direction or the other.

// Usage:
//   # basic example:
//   FreeFem++ -f microstrip.edp
//
//   # read from a data file
//   FreeFem++ -f stripline.edp -df stripline.dat
//

include "getARGV.idp"
include "utils.edp"

string df = getARGV("-df", "");
cout << "df = " << df << endl;

// set to true to pause after each plot
bool debug = false;
//debug = true;

// used with the adaptive meshing
real errorinit = 0.001;
real error = errorinit;

// Trace width
real W = 25.0 ;

// Total substrate thickness
real H = 62.0 ;

// Metal thickness
real Tmet = 0.7;

// relative dielectric constant of the substrate
real er = 4.8;

// meshing constant
int m = 70;
int mgndTB = 3*m;
int mgndLR = 20;
bool useAdaptMesh = false;
//useAdaptMesh = true;


// define labels for our borders
int gnd=3, line=4;

// output data file
ofstream logf("stripline.txt");
logf << "* W     H       Tmet       Er  :  Z0" << endl;

// if no data file is given, create one with the default values
if( df.length == 0) {
    df = "stripline.tmp";
    ofstream data(df);
    data << "* W     H       Tmet       Er" << endl;
    data << W << " " << H << " " << Tmet << " " << er << endl;
}
ifstream data(df);

cout << "Processing input data from " << df << endl;

while(1) {
    // Width, Height, Metal Thickness, Dielectric Constant
    skipcomment(data, logf);
    if (!data.good()) break;

    data >> W;
    data >> H;
    data >> Tmet;
    data >> er;

    cout << "Starting on:" << endl;
    cout << "W           = " << W << endl;
    cout << "H           = " << H << endl;
    cout << "Tmet        = " << Tmet << endl;
    if(Tmet == 0.0) {
        Tmet = 0.001*H;
        cout << "Tmet       -> " << Tmet << endl;
    }
    cout << "er          = " << er << endl;

    // height of the strip above the bottom ground
    // This could be used for an offset conductor
    // if desired
    real hd = 0.5*H - 0.5*Tmet;

    // Total width of the problem
    //
    // The sides are enclosed in this formulation so we need to make sure
    // this is far enough away to avoid causing issues but not so far as to make
    // it take a long long time to simulate.
    //
    // For this we are picking 10x the substrate thickness away on each side
    real Wtot = W + 2.0 * 10.0 * H;


    // *****************************
    // Define the boundaries
    // *****************************

    // outer conductor -- clockwise
    border occB(t=0, 1) {
        x = Wtot*t;
        y = 0;
        label = gnd;
    }

    border occR(t=0, 1) {
        x = Wtot;
        y = H*t;
        label = gnd;
    }

    border occT(t=0, 1) {
        x = Wtot*(1-t);
        y = H;
        label = gnd;
    }

    border occL(t=0, 1) {
        x = 0;
        y = H*(1 - t);
        label = gnd;
    }

    // center conductor -- also clockwise
    border ccB(t=0, 1) {
        x = 0.5*Wtot - 0.5*W + W*t;
        y = hd;
        label = line;
    }

    border ccR(t=0, 1) {
        x = 0.5*Wtot + 0.5*W;
        y = hd + Tmet*t;
        label = line;
    }

    border ccT(t=0, 1) {
        x = 0.5*Wtot + 0.5*W - W*t;
        y = hd + Tmet;
        label = line;
    }

    border ccL(t=0, 1) {
        x = 0.5*Wtot - 0.5*W;
        y = hd + Tmet*(1 - t);
        label = line;
    }

    // *****************************
    // Mesh generation
    // *****************************

    mesh Th;
    // a minus sign in the border argument defines the direction.
    Th = buildmesh (ccL(-m) + ccR(-m) + ccT(-m) + ccB(-m) + occB(mgndTB) + occR(mgndLR) + occT(mgndTB) + occL(mgndLR));
    plot(Th, cmm="Mesh", wait=debug);

    // *****************************
    // FE-space and FE-function
    // *****************************
    fespace Uh(Th, P1);

    // *****************************
    // Mathematical Formula
    // *****************************

    // *****************************
    // Weak Formulation
    // *****************************

    Uh u;
    Uh v;

    problem Laplace(u, v)
        = int2d(Th) (grad(u)' * grad(v))
        + on(gnd, u=0.)
        + on(line, u=1.)
        ;

    // Adaptmesh loop
    if(useAdaptMesh) {
        error = errorinit;
        for (int j = 0; j < 4 ; j++){
            Laplace;
            Th = adaptmesh(Th, u, err=error);
            plot(Th, fill=false, cmm="adaptive mesh - mesh", wait=debug);
            plot(u, fill=false, cmm="adaptive mesh - electric quasi-static potential", wait=debug);
            error = error/2;
        }
    }
    Laplace;
    plot(u, cmm="Electric Potential", wait=debug);

    real energy = eps0 * energy2d(Th, er, u);
    cout << "energy = " << energy << endl;


    real z0 = sqrt(er) /(c0 * energy);

    cout << "Lightspeed  = " << c0 << " m/s" << endl;
    cout << "mu0         = " << mu0 << " H/m" << endl;
    cout << "eps0        = " << eps0 << " F/m" << endl;
    cout << "W           = " << W << endl;
    cout << "H           = " << H << endl;
    cout << "Tmet        = " << Tmet << endl;
    cout << "Wtot        = " << Wtot << endl;
    cout << "er          = " << er << endl;
    cout << "energy      = " << energy << endl;
    cout << "Z0          = " << z0 << " Ohms" << endl;


    // Width, Height, Metal Thickness, Dielectric Constant, :  z0
    logf << W << " " << H << " " << Tmet << " " << er << " : " << z0 << endl;

}


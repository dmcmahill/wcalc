/*
 * Copyright (C) 2021 Dan McMahill
 * All rights reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// *****************************
// physical constants
// *****************************

// free space speed of light, meters/second
real c0 = 2.99792458e8;

// free space permitivitty (Henries/meter)
real mu0 = (4.0 * pi * 1.0e-7);

// free space permitivitty (Farads/meter)
real eps0 (1.0 / (c0 * c0 * mu0) );

// free space impedance, Ohms
real freespaceZ0 = (mu0 * c0);

// *****************************
// unit conversion macros
// *****************************

macro MIL2MICRON(x)  (x*25.4) //
macro MICRON2MIL(x)  (x/25.4) //

macro MIL2UM(x)  (x*25.4) //
macro UM2MIL(x)  (x/25.4) //

macro MIL2MM(x)  (x*25.4e-3)
macro MM2MIL(x)  (x/25.4e-3) //

macro MIL2CM(x)  (x*25.4e-4)
macro CM2MIL(x)  (x/25.4e-4) //

macro MIL2M(x)  (x*25.4e-6) //
macro M2MIL(x)  (x/25.4e-6) //

macro INCH2M(x)  (x*25.4e-3) //
macro M2INCH(x)  (x/25.4e-3) //

// *****************************
// utility macros
// *****************************


macro grad(u) [dx(u), dy(u)] //

macro energy2d(Th, eps, phi) (int2d(Th) ( (eps)*(dx(phi))*(dx(phi)) + (eps)*(dy(phi))*(dy(phi))) ) //

// *****************************
// I/O utility functions
// *****************************

//Function to skip comment starting with * in a file
func ifstream skipcomment(ifstream &ff){
    while(1) {
        // store file position
        int where = ff.tellg();

        string comment;

        // this reads the next string but it strips leading whitespace
        // which helps us!
        try {
            ff >> comment;
        }
        catch(...) { cout << "end of file" << endl; }

        if (!ff.good()) break;

        if (comment(0:0) == "*"){
            getline(ff, comment);
            cout << " -- *" << comment << endl;
        } else {
            ff.seekg(where); //restore file position
            break;
        }
    }
    return ff;
}


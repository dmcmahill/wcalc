.\" $Id: coax_syn.man,v 1.2 2001/12/13 05:08:32 dan Exp $
.\"
.\" Copyright (c) 2001 Dan McMahill
.\" All rights reserved.
.\"
.\" This code is derived from software written by Dan McMahill
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and.\"or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"        This product includes software developed by Dan McMahill
.\"  4. The name of the author may not be used to endorse or promote products
.\"     derived from this software without specific prior written permission.
.\" 
.\"  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\"  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\"  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\"  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\"  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
.\"  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\"  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
.\"  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
.\"  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\"  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\"  SUCH DAMAGE.
.\"

.TH coax_syn 1 "March 2001" "Dan McMahill" "Wcalc"
.\".so ../sci.an
.SH NAME
coax_syn - Coaxial transmission line analysis
.SH CALLING SEQUENCE
.nf
[a_out,b_out,c_out,er_out,len,loss] = 
  coax_syn(z0,elen,a,b,c,t,rho_a,rho_b,er,tand,f,flag);
.fi
.SH PARAMETERS
.TP 10
a
: radius of inner conductor (meters)
.TP
b
: inner radius of outer conductor (meters)
.TP
c
: offset of the inner conductor from the center (meters)
.TP
t
: thickness of shield (meters)
.TP
rho_a
: resistivity of inner conductor (ohms/meter)
.TP
rho_b
: resistivity of outer conductor (ohms/meter)
.TP
er
: relative permitivitty of dielectric
.TP
tand
: loss tangent of dielectric
.TP
len
: physical length of line (meters)
.TP
f
: operating frequency (Hertz)
.TP
flag
: indicates which parameters should be optimized
.RS
.TP 5
flag=0
: synthesize a
.TP
flag=1
: synthesize b
.TP
flag=2
: synthesize c
.TP
flag=3
: synthesize er
.RE
.TP
a_out
: synthesized radius of inner conductor (meters)
.TP
b_out
: synthesized inner radius of outer conductor (meters)
.TP
c_out
: synthesized offset of the inner conductor from the center (meters)
.TP
er_out
: synthesized relative permitivitty of dielectric
.TP
len
: synthesized physical length of line (meters)
.TP
loss
: resulting loss of line (dB)
.SH DESCRIPTION
function to synthesize the physical parameters of a
coaxial transmission line to achieve a given set of
electrical characteristics.
.SH EXAMPLE
.nf
sf=25.4e-6;       // mils to meters conversion factor
z0=75.0;          // desired characteristic impedance
elen=90.0;        // desired electrical length (degrees)
a=10.0*sf;        // radius of inner conductor
b=100.0*sf;       // inner radius of outer conductor
c=0*sf;           // offset of inner conductor
t=5.0*sf;         // thickness of outer conductor
rho_a=3.5e-8;     // resistivity of inner conductor
rho_b=rho_a;      // resistivity of outer conductor
er=9.5;           // relative permitivitty of dielectric
tand=0.01;        // dielectric loss tangent
f=100e6;          // 100 MHz operation
flag=1;           //
[a,b,c,er,len,loss] = ...
   coax_syn(z0,elen,a,b,c,t,rho_a,rho_b,er,tand,f,flag);
disp(sprintf('z0   = %g Ohms',z0));
disp(sprintf('elen = %g degrees',elen));
disp(sprintf('loss = %g dB',loss));
disp(sprintf('a    = %g m',a));
disp(sprintf('b    = %g m',b));
disp(sprintf('c    = %g m',c));
disp(sprintf('er   = %g ',er));
.fi
.SH SEE ALSO
coax_calc
.SH AUTHOR
Dan McMahill
